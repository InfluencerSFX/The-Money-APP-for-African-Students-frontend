import React from "react";

/**
 *
 * @param {string} username
 * @param {string} displayName
 * @param {string} challengeBufferString
 * @param {string} userId
 * @param {any[]} excludeCredentials
 */
export const createPassKeyCredential = async (
  username,
  displayName,
  challengeBufferString,
  userId,
  excludeCredentials
) => {
  /*
    The challenge is a buffer of randomly generated bytes with a minimum of 16 bytes. 
    This is generated on the server using a cryptographically secure random number generator. 
    By generating the challenge on the server we can prevent "replay attacks". 
    The authenticator will sign this along with other data.
  */
  const challengeBuffer = Uint8Array.from(challengeBufferString, (c) =>
    c.charCodeAt(0)
  );

  const userIdBuffer = Uint8Array.from(userId, (c) => c.charCodeAt(0));

  const publicKeyCredentialCreationOptions = {
    challenge: challengeBuffer,
    rp: {
      name: import.meta.env.VITE_RP_NAME,
      id: import.meta.env.VITE_DOMAIN,
    },
    user: {
      id: userIdBuffer,
      name: username,
      displayName: displayName,
    },
    // excludeCredentials,
    // SUPPORT ALL PASSKEYS
    pubKeyCredParams: [
      {
        type: "public-key",
        alg: -7,
      },
      {
        type: "public-key",
        alg: -35,
      },
      {
        type: "public-key",
        alg: -36,
      },
      {
        type: "public-key",
        alg: -257,
      },
      {
        type: "public-key",
        alg: -258,
      },
      {
        type: "public-key",
        alg: -259,
      },
      {
        type: "public-key",
        alg: -37,
      },
      {
        type: "public-key",
        alg: -38,
      },
      {
        type: "public-key",
        alg: -39,
      },
      {
        type: "public-key",
        alg: -8,
      },
    ],
    timeout: 60000,
    attestation: "direct",
  };

  console.log(
    "âœ…  publicKeyCredentialCreationOptions : ",
    publicKeyCredentialCreationOptions
  );

  return await navigator.credentials.create({
    publicKey: publicKeyCredentialCreationOptions,
  });
};
